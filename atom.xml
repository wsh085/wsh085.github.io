<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏皇叔</title>
  
  <subtitle>博主很懒，没有留下什么话...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-11T09:28:35.293Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏皇叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue.js学习笔记</title>
    <link href="http://yoursite.com/2017/12/08/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/12/08/vue-js学习笔记/</id>
    <published>2017-12-08T09:13:29.000Z</published>
    <updated>2017-12-11T09:28:35.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据的动态变化"><a href="#数据的动态变化" class="headerlink" title="数据的动态变化"></a>数据的动态变化</h3><p>​    vue响应式的数据动态显示变化是通过在Vue实例被创建时，向vue的响应系统中加入了其data对象中能找到的属性，也就是说一开始有的才行，后面添加的属性没有响应式，当这些响<br>应式的数据发生变化时，视图会进行重新渲染，如果不知道后面会不会加入数据怎么办呢？没关系，预留字段，设置为空或不存在，先占个坑嘛<br><a id="more"></a></p><h3 id="实例的生命周期"><a href="#实例的生命周期" class="headerlink" title="实例的生命周期"></a>实例的生命周期</h3><p>​    每个生命周期都会有相应的钩子函数，钩子函数的this指向调用它的vue实例:</p><pre><code>- beforeCreate:在实例被创建之前执行- created:在实例被创建之后执行- beforeMount:开始挂载编译生成的html到对应位置- mounted:挂载编译生成html完成，可以进行ajax请求，数据初始化（在整个生命周期中只执行一次）- beforeUpdate:数据发生变化要重新渲染DOM之前- updated:数据发生变化，重新渲染DOM完成- beforeDestroy：当 vm.$destroy() 被调用时- destroyed: 销毁完成之后</code></pre><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>​    在底层的实现上，vue将模板编译成虚拟DOM渲染函数，结合响应系统，在应用状态改变时,vue能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上</p><pre><code>- 文本：双大括号- HTML：v-html指令- 使用JavaScript表达式：每个绑定都只能包含单个表达式</code></pre><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>​    带有v- 前缀的特殊属性，指令的作用是当表达式的值发生改变时，将其产生的连带作用响应式的作用于DOM上</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>​    computed选项。 为了不在模板中放入太多逻辑导致模板太重难以维护，vue建议将计算的方法放在实例的一个属性中，就像绑定普通属性一样绑定计算属性，<br>​    Vue 知道 vm.reversedMessage 依赖于 vm.message，因此当 vm.message 发生改变时，所有依赖 vm.reversedMessage 的绑定也会更新</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>​    Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的</p><h3 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h3><ol><li>绑定HTLM Class<br>对象语法：v-bind:class 动态切换多个class <code>v-bind:class=&quot;{ active: isActive, &#39;text-danger&#39;: hasError }&quot;</code>v-bind:class 指令也可以与普通class共存</li><li>绑定内联样式<br>对象语法：v-bind：style  CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名 , 其实是一个 JavaScript 对象</li></ol><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>​    因为 v-if 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个<code>&lt;template&gt;</code>元素当做不可见的包裹元素，并在上面使用 </p><p>v-if。最终的渲染结果将不包含<code>&lt;template&gt;</code>元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&quot;ok&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Title&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 1&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 2&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>​    Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。但是有时我们并不需要这种效果，</p><p>那么我们怎么来告诉vue “这两个是独立的元素，不要复用它们” 呢？  给元素添加一个具有唯一值的 key 即可</p><p><strong>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级</strong></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>​    可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码，也可以绑定方法名，方法的定义放在实例的 methods 选项中</p><pre><code>1. 事件修饰符    Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的    .stop    .prevent    .capture    .self    .once    -------------------------------------------------------------------------------    &lt;!-- 阻止单击事件继续传播 --&gt;    &lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;    &lt;!-- 提交事件不再重载页面 --&gt;    &lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;    &lt;!-- 修饰符可以串联 --&gt;    &lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;    &lt;!-- 只有修饰符 --&gt;    &lt;form v-on:submit.prevent&gt;&lt;/form&gt;    &lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;    &lt;!-- 即内部元素触发的事件先在此处处理，然后才交由内部元素自身进行处理 --&gt;    &lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;    &lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;    &lt;!-- 即事件不是从内部元素触发的 --&gt;    &lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;    &lt;!-- 点击事件将只会触发一次 --&gt;    &lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</code></pre><p>注：使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 @click.prevent.self 会阻止所有的点击，而 @click.self.prevent 只会阻止对元素自身的点击。 </p><pre><code>2. 按键修饰符    &lt;!-- 只有在keyCode是 13 时调用vm.submit() --&gt;    &lt;input v-on:keyup.13=&quot;submit&quot;&gt;    记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：    &lt;!-- 同上 --&gt;    &lt;input v-on:keyup.enter=&quot;submit&quot;&gt;    &lt;!-- 缩写语法 --&gt;    &lt;input @keyup.enter=&quot;submit&quot;&gt;    全部的按键别名：    .enter    .tab    .delete (捕获“删除”和“退格”键)    .esc    .space    .up    .down    .left    .right</code></pre><p>可以通过全局 config.keyCodes 对象自定义按键修饰符别名：<br>        // 可以使用 v-on:keyup.f1<br>        Vue.config.keyCodes.f1 = 112</p><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><pre><code>- .ctrl- .alt- .shift- .meta- &lt;!-- Alt + C --&gt;` &lt;input @keyup.alt.67=&quot;clear&quot;&gt; `-&lt;!-- Ctrl + Click --&gt;` &lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt; `</code></pre><h3 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h3><p>​    v-model指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但<code>v-model</code> 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>​    组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素</p><p>​    注册一个全局组件 <code>Vue.component(tagName,options)</code>  注意确保在初始化根实例之前注册组件<br>局部注册组件  可以通过某个 Vue 实例/组件的实例选项 components 注册仅在其作用域中可用的组件：<br>    var Child = {<br>        template: ‘<div>A custom component!</div>‘<br>    }<br>    new Vue({<br>        // …<br>        components: {<br>        // <my-component> 将只在父组件模板中可用<br>        ‘my-component’: Child<br>        }<br>    })</my-component></p><p>问：在使用vue-cli 脚手架工具生成的 .vue 组件文件中， export default 中暴露出来的数据为什么可以做 template 中的响应数据，其作用与 new Vue 差不多？</p><p>答：首先，export default  与 new Vue 并不一样，new Vue返回一个vue的实例对象， export default 将一个组件导出<br>    然后  由于用的vue-cli 脚手架生成的工程，在webpack 开发vue的同时使用了 vue-loader<br>    最后  vue-loader 是webpack 的一个loader ,专门用来处理 .vue 文件的。 PS：一个.vue文件有三块 ` <template></template>  <script> export default {}</script>  <style></style> </p><p>问：以驼峰命名的属性在渲染之后会怎么显示？<br>答：驼峰命名中的大写字母在渲染后会自动转成小写，但会不会与中划线相同？（好像不会）</p><p>问：为什么data 是函数类型，而不是对象类型<br>答：对象类型的话，如果多个组件引用了这个组件的话，会导致多个组件共用一个变量，使用函数return，可以在引用的时候形成自己的一份实例 </p><p>问：vue中样式污染的原因及解决方法<br>答：由于各组件都有自己的样式，vue在渲染的时候是把<style></style>标签插入到html的头部，这就会造成不经意间的样式覆盖。解决方法是在每个组件的style标签上家加上scoped 属性，原理是加了scoped 属性，vue在渲染时会为每个组件元素添加一个不同的scopeId,组件的样式作用会根据 属性选择器 来作用，但还有一个问题就是<strong>子组件的根元素会继承父组件的样式也可能会导致样式错乱，这是必然存在的，需要自己小心避免；</strong><br>     深度作用选择器：  如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符<br>    <style scoped><br>    .a &gt;&gt;&gt; .b { /<em> … </em>/ }<br>    </style><br>    上述代码将会编译成：</p><pre><code>.a[data-v-f3f3eg9] .b { /* ... */ }</code></pre><p>如果想要获取到Vue实例中选项的对象，Vue提供$进行获取  如app.$el  app.$data<br>数组的过滤方法， arr.filter(callback(element,  index,     arr))  返回通过测试的元素的集合的数组元素的值  元素的索引  被遍历的数组</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据的动态变化&quot;&gt;&lt;a href=&quot;#数据的动态变化&quot; class=&quot;headerlink&quot; title=&quot;数据的动态变化&quot;&gt;&lt;/a&gt;数据的动态变化&lt;/h3&gt;&lt;p&gt;​    vue响应式的数据动态显示变化是通过在Vue实例被创建时，向vue的响应系统中加入了其data对象中能找到的属性，也就是说一开始有的才行，后面添加的属性没有响应式，当这些响&lt;br&gt;应式的数据发生变化时，视图会进行重新渲染，如果不知道后面会不会加入数据怎么办呢？没关系，预留字段，设置为空或不存在，先占个坑嘛&lt;br&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/12/08/hello-world/"/>
    <id>http://yoursite.com/2017/12/08/hello-world/</id>
    <published>2017-12-08T07:10:08.227Z</published>
    <updated>2017-12-08T07:10:08.227Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
